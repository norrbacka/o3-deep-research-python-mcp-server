TITLE: Development Mode with MCP CLI
DESCRIPTION: Use the `mcp dev` command to run your server in development mode with the MCP Inspector. This allows for quick testing and debugging. Options include adding Python dependencies and mounting local code for live updates.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
mcp dev server.py

# Add dependencies
mcp dev server.py --with pandas --with numpy

# Mount local code
mcp dev server.py --with-editable .
```

----------------------------------------

TITLE: Creating a Simple Echo Server with FastMCP (Python)
DESCRIPTION: Illustrates how to define a basic MCP server using FastMCP. It shows the use of @mcp.resource, @mcp.tool, and @mcp.prompt decorators to expose different types of functionality.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_26

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("Echo")


@mcp.resource("echo://{message}")
def echo_resource(message: str) -> str:
    """Echo a message as a resource"""
    return f"Resource echo: {message}"


@mcp.tool()
def echo_tool(message: str) -> str:
    """Echo a message as a tool"""
    return f"Tool echo: {message}"


@mcp.prompt()
def echo_prompt(message: str) -> str:
    """Create an echo prompt"""
    return f"Please process this message: {message}"
```

----------------------------------------

TITLE: Creating MCP Client with Stdio Transport (Python)
DESCRIPTION: This snippet illustrates how to create an MCP client that connects to a server via stdio. It shows how to define server parameters, optionally provide a sampling callback, establish a `ClientSession`, initialize the connection, and perform various operations like listing prompts/resources/tools, getting a prompt, reading a resource, and calling a tool.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_30

LANGUAGE: Python
CODE:
```
from mcp import ClientSession, StdioServerParameters, types
from mcp.client.stdio import stdio_client

# Create server parameters for stdio connection
server_params = StdioServerParameters(
    command="python",  # Executable
    args=["example_server.py"],  # Optional command line arguments
    env=None,  # Optional environment variables
)


# Optional: create a sampling callback
async def handle_sampling_message(
    message: types.CreateMessageRequestParams,
) -> types.CreateMessageResult:
    return types.CreateMessageResult(
        role="assistant",
        content=types.TextContent(
            type="text",
            text="Hello, world! from model",
        ),
        model="gpt-3.5-turbo",
        stopReason="endTurn",
    )


async def run():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(
            read, write, sampling_callback=handle_sampling_message
        ) as session:
            # Initialize the connection
            await session.initialize()

            # List available prompts
            prompts = await session.list_prompts()

            # Get a prompt
            prompt = await session.get_prompt(
                "example-prompt", arguments={"arg1": "value"}
            )

            # List available resources
            resources = await session.list_resources()

            # List available tools
            tools = await session.list_tools()

            # Read a resource
            content, mime_type = await session.read_resource("file://some/path")

            # Call a tool
            result = await session.call_tool("tool-name", arguments={"arg1": "value"})


if __name__ == "__main__":
    import asyncio

    asyncio.run(run())
```

----------------------------------------

TITLE: Create Simple MCP Server (Python)
DESCRIPTION: Demonstrates creating a basic MCP server using FastMCP, adding a tool for addition and a dynamic resource for greetings.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_4

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP

# Create an MCP server
mcp = FastMCP("Demo")


# Add an addition tool
@mcp.tool()
def add(a: int, b: int) -> int:
    """Add two numbers"""
    return a + b


# Add a dynamic greeting resource
@mcp.resource("greeting://{name}")
def get_greeting(name: str) -> str:
    """Get a personalized greeting"""
    return f"Hello, {name}!"
```

----------------------------------------

TITLE: Accessing Context in FastMCP Tools (Python)
DESCRIPTION: Explains how to access the `Context` object within a tool to utilize MCP capabilities like logging (`ctx.info`), reporting progress (`ctx.report_progress`), and reading resources (`ctx.read_resource`).
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_12

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP, Context

mcp = FastMCP("My App")


@mcp.tool()
async def long_task(files: list[str], ctx: Context) -> str:
    """Process multiple files with progress tracking"""
    for i, file in enumerate(files):
        ctx.info(f"Processing {file}")
        await ctx.report_progress(i, len(files))
        data, mime_type = await ctx.read_resource(f"file://{file}")
    return "Processing complete"
```

----------------------------------------

TITLE: Implementing SQLite Explorer with FastMCP (Python)
DESCRIPTION: Provides a more advanced example of an MCP server using FastMCP that interacts with an SQLite database. It demonstrates defining a resource to get the database schema and a tool to execute SQL queries.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_27

LANGUAGE: python
CODE:
```
import sqlite3

from mcp.server.fastmcp import FastMCP

mcp = FastMCP("SQLite Explorer")


@mcp.resource("schema://main")
def get_schema() -> str:
    """Provide the database schema as a resource"""
    conn = sqlite3.connect("database.db")
    schema = conn.execute("SELECT sql FROM sqlite_master WHERE type='table'").fetchall()
    return "\n".join(sql[0] for sql in schema if sql[0])


@mcp.tool()
def query_data(sql: str) -> str:
    """Execute SQL queries safely"""
    conn = sqlite3.connect("database.db")
    try:
        result = conn.execute(sql).fetchall()
        return "\n".join(str(row) for row in result)
    except Exception as e:
        return f"Error: {str(e)}"
```

----------------------------------------

TITLE: Mounting Multiple FastMCP Servers in FastAPI
DESCRIPTION: Integrate multiple FastMCP servers into a single FastAPI application. This requires defining a combined lifespan context manager to manage the session managers of each MCP server and then mounting each server's streamable HTTP application (`.streamable_http_app()`) at different paths.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_21

LANGUAGE: python
CODE:
```
# main.py
import contextlib
from fastapi import FastAPI
from mcp.echo import echo
from mcp.math import math


# Create a combined lifespan to manage both session managers
@contextlib.asynccontextmanager
async def lifespan(app: FastAPI):
    async with contextlib.AsyncExitStack() as stack:
        await stack.enter_async_context(echo.mcp.session_manager.run())
        await stack.enter_async_context(math.mcp.session_manager.run())
        yield


app = FastAPI(lifespan=lifespan)
app.mount("/echo", echo.mcp.streamable_http_app())
app.mount("/math", math.mcp.streamable_http_app())
```

----------------------------------------

TITLE: Configuring FastMCP Authentication (Python)
DESCRIPTION: Shows how to configure OAuth 2.0 authentication settings for the FastMCP server, including issuer URL, revocation options, client registration options, and required scopes.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_13

LANGUAGE: python
CODE:
```
mcp = FastMCP("My App",
        auth_server_provider=MyOAuthServerProvider(),
        auth=AuthSettings(
            issuer_url="https://myapp.com",
            revocation_options=RevocationOptions(
                enabled=True,
            ),
            client_registration_options=ClientRegistrationOptions(
                enabled=True,
                valid_scopes=["myscope", "myotherscope"],
                default_scopes=["myscope"],
            ),
            required_scopes=["myscope"],
        ),
)
```

----------------------------------------

TITLE: Configuring Starlette App with Mounted MCP Servers (Python)
DESCRIPTION: Initializes a Starlette application and mounts multiple MCP servers at different paths. Demonstrates both settings-based configuration and direct path parameter usage for mounting.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_24

LANGUAGE: python
CODE:
```
app = Starlette(
    routes=[
        # Using settings-based configuration
        Mount("/github", app=github_mcp.sse_app()),
        Mount("/browser", app=browser_mcp.sse_app()),
        # Using direct mount path parameter
        Mount("/curl", app=curl_mcp.sse_app("/curl")),
        Mount("/search", app=search_mcp.sse_app("/search")),
    ]
)
```

----------------------------------------

TITLE: Creating MCP Client with Streamable HTTP Transport (Python)
DESCRIPTION: This snippet demonstrates how to connect an MCP client to a server using the Streamable HTTP transport. It shows how to use `streamablehttp_client` to establish the connection streams and then use these streams to create a `ClientSession` for interacting with the server, including initialization and calling tools.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_31

LANGUAGE: Python
CODE:
```
from mcp.client.streamable_http import streamablehttp_client
from mcp import ClientSession


async def main():
    # Connect to a streamable HTTP server
    async with streamablehttp_client("example/mcp") as (
        read_stream,
        write_stream,
        _,
    ):
        # Create a session using the client streams
        async with ClientSession(read_stream, write_stream) as session:
            # Initialize the connection
            await session.initialize()
            # Call a tool
            tool_result = await session.call_tool("echo", {"message": "hello"})
```

----------------------------------------

TITLE: Defining FastMCP Prompts (Python)
DESCRIPTION: Shows how to define reusable prompts using the `@mcp.prompt()` decorator for structuring LLM interactions, showing examples returning a string or a list of messages.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_10

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP
from mcp.server.fastmcp.prompts import base

mcp = FastMCP("My App")


@mcp.prompt()
def review_code(code: str) -> str:
    return f"Please review this code:\n\n{code}"


@mcp.prompt()
def debug_error(error: str) -> list[base.Message]:
    return [
        base.UserMessage("I'm seeing this error:"),
        base.UserMessage(error),
        base.AssistantMessage("I'll help debug that. What have you tried so far?"),
    ]
```

----------------------------------------

TITLE: Using MCP Python Client to Access Resources
DESCRIPTION: An asynchronous Python example demonstrating how to connect to the simple MCP server via stdio, initialize a session, list available resources, and read a specific resource using the `mcp.client` library.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-resource/README.md#_snippet_1

LANGUAGE: python
CODE:
```
import asyncio
from mcp.types import AnyUrl
from mcp.client.session import ClientSession
from mcp.client.stdio import StdioServerParameters, stdio_client


async def main():
    async with stdio_client(
        StdioServerParameters(command="uv", args=["run", "mcp-simple-resource"])
    ) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            # List available resources
            resources = await session.list_resources()
            print(resources)

            # Get a specific resource
            resource = await session.read_resource(AnyUrl("file:///greeting.txt"))
            print(resource)


asyncio.run(main())
```

----------------------------------------

TITLE: Defining FastMCP Tools (Python)
DESCRIPTION: Illustrates how to define tools using the `@mcp.tool()` decorator for actions like calculating BMI or fetching weather, including synchronous and asynchronous examples.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_9

LANGUAGE: python
CODE:
```
import httpx
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("My App")


@mcp.tool()
def calculate_bmi(weight_kg: float, height_m: float) -> float:
    """Calculate BMI given weight in kg and height in meters"""
    return weight_kg / (height_m**2)


@mcp.tool()
async def fetch_weather(city: str) -> str:
    """Fetch current weather for a city"""
    async with httpx.AsyncClient() as client:
        response = await client.get(f"https://api.weather.com/{city}")
        return response.text
```

----------------------------------------

TITLE: Using Low-Level Server with Lifespan Management (Python)
DESCRIPTION: Demonstrates configuring a low-level MCP server using mcp.server.Server and implementing lifespan management with asynccontextmanager. It shows how to initialize resources (like a database connection) on startup and access them within request handlers.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_28

LANGUAGE: python
CODE:
```
from contextlib import asynccontextmanager
from collections.abc import AsyncIterator

from fake_database import Database  # Replace with your actual DB type

from mcp.server import Server


@asynccontextmanager
async def server_lifespan(server: Server) -> AsyncIterator[dict]:
    """Manage server startup and shutdown lifecycle."""
    # Initialize resources on startup
    db = await Database.connect()
    try:
        yield {"db": db}
    finally:
        # Clean up on shutdown
        await db.disconnect()


# Pass lifespan to server
server = Server("example-server", lifespan=server_lifespan)


# Access lifespan context in handlers
@server.call_tool()
async def query_db(name: str, arguments: dict) -> list:
    ctx = server.get_context()
    db = ctx.lifespan_context["db"]
    return await db.query(arguments["query"])
```

----------------------------------------

TITLE: Initializing FastMCP Server with Lifespan and Dependencies (Python)
DESCRIPTION: Demonstrates how to create a FastMCP server instance, configure dependencies, add a type-safe lifespan context for startup/shutdown, and access the context within a tool.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_7

LANGUAGE: python
CODE:
```
# Add lifespan support for startup/shutdown with strong typing
from contextlib import asynccontextmanager
from collections.abc import AsyncIterator
from dataclasses import dataclass

from fake_database import Database  # Replace with your actual DB type

from mcp.server.fastmcp import Context, FastMCP

# Create a named server
mcp = FastMCP("My App")

# Specify dependencies for deployment and development
mcp = FastMCP("My App", dependencies=["pandas", "numpy"])


@dataclass
class AppContext:
    db: Database


@asynccontextmanager
async def app_lifespan(server: FastMCP) -> AsyncIterator[AppContext]:
    """Manage application lifecycle with type-safe context"""
    # Initialize on startup
    db = await Database.connect()
    try:
        yield AppContext(db=db)
    finally:
        # Cleanup on shutdown
        await db.disconnect()


# Pass lifespan to server
mcp = FastMCP("My App", lifespan=app_lifespan)


# Access type-safe lifespan context in tools
@mcp.tool()
def query_db(ctx: Context) -> str:
    """Tool that uses initialized resources"""
    db = ctx.request_context.lifespan_context.db
    return db.query()
```

----------------------------------------

TITLE: FastMCP Server with Streamable HTTP Transport
DESCRIPTION: Configure a FastMCP server to use the streamable HTTP transport. This transport supports stateful or stateless operation modes and can be configured for JSON responses. Run the server by specifying `transport="streamable-http"` in the `run()` method.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_18

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP

# Stateful server (maintains session state)
mcp = FastMCP("StatefulServer")

# Stateless server (no session persistence)
mcp = FastMCP("StatelessServer", stateless_http=True)

# Stateless server (no session persistence, no sse stream with supported client)
mcp = FastMCP("StatelessServer", stateless_http=True, json_response=True)

# Run server with streamable_http transport
mcp.run(transport="streamable-http")
```

----------------------------------------

TITLE: Mounting FastMCP SSE Server in Starlette
DESCRIPTION: Mount a FastMCP server using the SSE transport into an existing Starlette ASGI application. The server's SSE application (`.sse_app()`) can be mounted as a path using `Mount` or dynamically as a host using `Host`.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_22

LANGUAGE: python
CODE:
```
from starlette.applications import Starlette
from starlette.routing import Mount, Host
from mcp.server.fastmcp import FastMCP


mcp = FastMCP("My App")

# Mount the SSE server to the existing ASGI server
app = Starlette(
    routes=[
        Mount('/', app=mcp.sse_app()),
    ]
)

# or dynamically mount as host
app.router.routes.append(Host('mcp.acme.corp', app=mcp.sse_app()))
```

----------------------------------------

TITLE: Defining FastMCP Resources (Python)
DESCRIPTION: Shows how to define resources using the `@mcp.resource()` decorator to expose static and dynamic data endpoints to LLMs.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_8

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("My App")


@mcp.resource("config://app")
def get_config() -> str:
    """Static configuration data"""
    return "App configuration here"


@mcp.resource("users://{user_id}/profile")
def get_user_profile(user_id: str) -> str:
    """Dynamic user data"""
    return f"Profile data for user {user_id}"
```

----------------------------------------

TITLE: Defining MCP Server with Stdio Transport (Python)
DESCRIPTION: This snippet demonstrates how to define an MCP server using the Python SDK. It includes handlers for listing and retrieving prompts and sets up the server to run over standard input/output (stdio) using `stdio_server`. It shows how to initialize the server with capabilities.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_29

LANGUAGE: Python
CODE:
```
# Create a server instance
server = Server("example-server")


@server.list_prompts()
async def handle_list_prompts() -> list[types.Prompt]:
    return [
        types.Prompt(
            name="example-prompt",
            description="An example prompt template",
            arguments=[
                types.PromptArgument(
                    name="arg1", description="Example argument", required=True
                )
            ],
        )
    ]


@server.get_prompt()
async def handle_get_prompt(
    name: str, arguments: dict[str, str] | None
) -> types.GetPromptResult:
    if name != "example-prompt":
        raise ValueError(f"Unknown prompt: {name}")

    return types.GetPromptResult(
        description="Example prompt",
        messages=[
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text="Example prompt text"),
            )
        ],
    )


async def run():
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="example",
                server_version="0.1.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )


if __name__ == "__main__":
    import asyncio

    asyncio.run(run())
```

----------------------------------------

TITLE: Using the MCP Client to Call the Fetch Tool (Python)
DESCRIPTION: Demonstrates how to use the MCP Python client to connect to the simple server via stdio, initialize a session, list available tools, and call the 'fetch' tool with a URL argument.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-tool/README.md#_snippet_1

LANGUAGE: python
CODE:
```
import asyncio
from mcp.client.session import ClientSession
from mcp.client.stdio import StdioServerParameters, stdio_client


async def main():
    async with stdio_client(
        StdioServerParameters(command="uv", args=["run", "mcp-simple-tool"])
    ) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            # List available tools
            tools = await session.list_tools()
            print(tools)

            # Call the fetch tool
            result = await session.call_tool("fetch", {"url": "https://example.com"})
            print(result)


asyncio.run(main())
```

----------------------------------------

TITLE: Install Server with MCP CLI
DESCRIPTION: Install your prepared MCP server for use with Claude Desktop using the `mcp install` command. You can specify a custom name for the server or pass environment variables directly or from a .env file.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
mcp install server.py

# Custom name
mcp install server.py --name "My Analytics Server"

# Environment variables
mcp install server.py -v API_KEY=abc123 -v DB_URL=postgres://...
mcp install server.py -f .env
```

----------------------------------------

TITLE: Using MCP Client to Get Simple Prompt (Python)
DESCRIPTION: Python code demonstrating how to connect to the MCP simple prompt server using the stdio client, initialize a session, list available prompts, and retrieve the 'simple' prompt with specific context and topic arguments.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-prompt/README.md#_snippet_1

LANGUAGE: python
CODE:
```
import asyncio
from mcp.client.session import ClientSession
from mcp.client.stdio import StdioServerParameters, stdio_client


async def main():
    async with stdio_client(
        StdioServerParameters(command="uv", args=["run", "mcp-simple-prompt"])
    ) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            # List available prompts
            prompts = await session.list_prompts()
            print(prompts)

            # Get the prompt with arguments
            prompt = await session.get_prompt(
                "simple",
                {
                    "context": "User is a software developer",
                    "topic": "Python async programming",
                },
            )
            print(prompt)


asyncio.run(main())
```

----------------------------------------

TITLE: Running a FastMCP Server Directly
DESCRIPTION: Execute a FastMCP server script directly using the Python interpreter or via the `mcp run` command. Note that `mcp run` and `mcp dev` are specifically designed for FastMCP servers.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_17

LANGUAGE: bash
CODE:
```
python server.py
# or
mcp run server.py
```

----------------------------------------

TITLE: Install MCP Server (Bash)
DESCRIPTION: Installs the specified MCP server file ('server.py') for use with clients like Claude Desktop.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
mcp install server.py
```

----------------------------------------

TITLE: FastMCP Tool Definition (Math Example)
DESCRIPTION: Define another simple tool within a FastMCP server. This example creates an 'add_two' tool that takes an integer `n` and returns `n + 2`. This server is also configured for stateless HTTP.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_20

LANGUAGE: python
CODE:
```
# math.py
from mcp.server.fastmcp import FastMCP

mcp = FastMCP(name="MathServer", stateless_http=True)


@mcp.tool(description="A simple add tool")
def add_two(n: int) -> int:
    return n + 2
```

----------------------------------------

TITLE: FastMCP Tool Definition (Echo Example)
DESCRIPTION: Define a simple tool within a FastMCP server using the `@mcp.tool` decorator. This example creates an 'echo' tool that takes a string message and returns it prefixed with 'Echo:'. This server is configured for stateless HTTP.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_19

LANGUAGE: python
CODE:
```
# echo.py
from mcp.server.fastmcp import FastMCP

mcp = FastMCP(name="EchoServer", stateless_http=True)


@mcp.tool(description="A simple echo tool")
def echo(message: str) -> str:
    return f"Echo: {message}"
```

----------------------------------------

TITLE: Setting up OAuth Authentication with Python SDK
DESCRIPTION: This snippet demonstrates how to configure OAuth authentication using the `OAuthClientProvider` from the MCP Python SDK. It shows how to define client metadata, integrate custom token storage, and use the authentication provider with a streamable HTTP client and a `ClientSession` to connect to an MCP server.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_32

LANGUAGE: python
CODE:
```
from mcp.client.auth import OAuthClientProvider, TokenStorage
from mcp.client.session import ClientSession
from mcp.client.streamable_http import streamablehttp_client
from mcp.shared.auth import OAuthClientInformationFull, OAuthClientMetadata, OAuthToken


class CustomTokenStorage(TokenStorage):
    """Simple in-memory token storage implementation."""

    async def get_tokens(self) -> OAuthToken | None:
        pass

    async def set_tokens(self, tokens: OAuthToken) -> None:
        pass

    async def get_client_info(self) -> OAuthClientInformationFull | None:
        pass

    async def set_client_info(self, client_info: OAuthClientInformationFull) -> None:
        pass


async def main():
    # Set up OAuth authentication
    oauth_auth = OAuthClientProvider(
        server_url="https://api.example.com",
        client_metadata=OAuthClientMetadata(
            client_name="My Client",
            redirect_uris=["http://localhost:3000/callback"],
            grant_types=["authorization_code", "refresh_token"],
            response_types=["code"],
        ),
        storage=CustomTokenStorage(),
        redirect_handler=lambda url: print(f"Visit: {url}"),
        callback_handler=lambda: ("auth_code", None),
    )

    # Use with streamable HTTP client
    async with streamablehttp_client(
        "https://api.example.com/mcp", auth=oauth_auth
    ) as (read, write, _):
        async with ClientSession(read, write) as session:
            await session.initialize()
            # Authenticated session ready
```

----------------------------------------

TITLE: Run MCP Server in Dev Mode (Bash)
DESCRIPTION: Starts the specified MCP server file ('server.py') in development mode, typically for testing with the MCP Inspector.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
mcp dev server.py
```

----------------------------------------

TITLE: Configuring Mount Paths for FastMCP Servers
DESCRIPTION: When mounting multiple FastMCP servers, configure their respective mount paths. This can be done persistently via the server's settings (`.settings.mount_path`) or ad-hoc by passing the path directly to the application method (e.g., `.sse_app(mount_path="/path")`).
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_23

LANGUAGE: python
CODE:
```
from starlette.applications import Starlette
from starlette.routing import Mount
from mcp.server.fastmcp import FastMCP

# Create multiple MCP servers
github_mcp = FastMCP("GitHub API")
browser_mcp = FastMCP("Browser")
curl_mcp = FastMCP("Curl")
search_mcp = FastMCP("Search")

# Method 1: Configure mount paths via settings (recommended for persistent configuration)
github_mcp.settings.mount_path = "/github"
browser_mcp.settings.mount_path = "/browser"

# Method 2: Pass mount path directly to sse_app (preferred for ad-hoc mounting)
# This approach doesn't modify the server's settings permanently
```

----------------------------------------

TITLE: Add MCP Dependency with uv (Bash)
DESCRIPTION: Adds the 'mcp' package with the 'cli' extra to the project dependencies using uv.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
uv add "mcp[cli]"
```

----------------------------------------

TITLE: Install MCP with pip (Bash)
DESCRIPTION: Installs the 'mcp' package with the 'cli' extra using pip for projects not using uv.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install "mcp[cli]"
```

----------------------------------------

TITLE: Basic FastMCP Server Definition
DESCRIPTION: Define a simple MCP server using the `FastMCP` class. Initialize it with a name and call the `run()` method within a standard Python `if __name__ == "__main__":` block to start the server.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_16

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("My App")

if __name__ == "__main__":
    mcp.run()
```

----------------------------------------

TITLE: Initialize uv Project (Bash)
DESCRIPTION: Initializes a new uv-managed Python project directory and changes into it.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
uv init mcp-server-demo
cd mcp-server-demo
```

----------------------------------------

TITLE: Setting GitHub OAuth Environment Variables (Bash)
DESCRIPTION: Sets the required environment variables for the GitHub OAuth client ID and secret before running the server. These are essential for the server to authenticate with GitHub.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-auth/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
export MCP_GITHUB_GITHUB_CLIENT_ID="your_client_id_here"
export MCP_GITHUB_GITHUB_CLIENT_SECRET="your_client_secret_here"
```

----------------------------------------

TITLE: Start MCP Server with OAuth (Bash)
DESCRIPTION: Example command to start an MCP server (like mcp-simple-auth) with streamable HTTP transport and OAuth enabled on a specific port.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/clients/simple-auth-client/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd path/to/mcp-simple-auth
uv run mcp-simple-auth --transport streamable-http --port 3001
```

----------------------------------------

TITLE: Running MCP Server with Streamable HTTP Transport (Bash)
DESCRIPTION: Starts the MCP server using the 'uv' tool, specifying the Streamable HTTP transport protocol. This makes the /mcp endpoint available.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-auth/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv run mcp-simple-auth --transport streamable-http
```

----------------------------------------

TITLE: Run mcp Command with uv (Bash)
DESCRIPTION: Executes the 'mcp' command using the uv runner within the project environment.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv run mcp
```

----------------------------------------

TITLE: Running MCP Server with Default SSE Transport (Bash)
DESCRIPTION: Starts the MCP server using the 'uv' tool. By default, it uses the Server-Sent Events (SSE) transport protocol, making the /sse endpoint available.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-auth/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
uv run mcp-simple-auth
```

----------------------------------------

TITLE: Running the MCP Simple StreamableHttp Server
DESCRIPTION: Commands to start the MCP server using `uv run`. Demonstrates specifying a custom port, setting the logging level, and enabling JSON responses instead of SSE streams. Requires `uv` to be installed and the project structure to be set up correctly.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-streamablehttp/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Using custom port
uv run mcp-simple-streamablehttp --port 3000

# Custom logging level
uv run mcp-simple-streamablehttp --log-level DEBUG

# Enable JSON responses instead of SSE streams
uv run mcp-simple-streamablehttp --json-response
```

----------------------------------------

TITLE: Starting MCP Simple Prompt Server (Bash)
DESCRIPTION: Commands to start the MCP simple prompt server using the 'uv run' command, demonstrating both the default stdio transport and the SSE transport on a custom port.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-prompt/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Using stdio transport (default)
uv run mcp-simple-prompt

# Using SSE transport on custom port
uv run mcp-simple-prompt --transport sse --port 8000
```

----------------------------------------

TITLE: Starting MCP Simple Resource Server (Bash)
DESCRIPTION: Commands to start the simple MCP server using the `uv run` command, demonstrating both stdio (default) and SSE transport options with an optional custom port.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-resource/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Using stdio transport (default)
uv run mcp-simple-resource

# Using SSE transport on custom port
uv run mcp-simple-resource --transport sse --port 8000
```

----------------------------------------

TITLE: Starting the MCP Stateless Server (Bash)
DESCRIPTION: Provides various command-line options for starting the stateless MCP server using the `uv run` command. It shows how to use the default port, specify a custom port, set the logging level, and enable JSON responses instead of the default SSE streams.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-streamablehttp-stateless/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# Using default port 3000
uv run mcp-simple-streamablehttp-stateless

# Using custom port
uv run mcp-simple-streamablehttp-stateless --port 3000

# Custom logging level
uv run mcp-simple-streamablehttp-stateless --log-level DEBUG

# Enable JSON responses instead of SSE streams
uv run mcp-simple-streamablehttp-stateless --json-response
```

----------------------------------------

TITLE: Running MCP Server with Explicit SSE Transport (Bash)
DESCRIPTION: Starts the MCP server using the 'uv' tool, explicitly specifying the Server-Sent Events (SSE) transport protocol. This is the default behavior.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-auth/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
uv run mcp-simple-auth --transport sse
```

----------------------------------------

TITLE: Handling Images with FastMCP (Python)
DESCRIPTION: Shows how to use the `mcp.server.fastmcp.Image` class within a tool to process image data, such as creating a thumbnail using PIL.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_11

LANGUAGE: python
CODE:
```
from mcp.server.fastmcp import FastMCP, Image
from PIL import Image as PILImage

mcp = FastMCP("My App")


@mcp.tool()
def create_thumbnail(image_path: str) -> Image:
    """Create a thumbnail from an image"""
    img = PILImage.open(image_path)
    img.thumbnail((100, 100))
    return Image(data=img.tobytes(), format="png")
```

----------------------------------------

TITLE: Run Simple Auth Client (Custom URL) (Bash)
DESCRIPTION: Execute the simple auth client, overriding the default server URL using the MCP_SERVER_URL environment variable.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/clients/simple-auth-client/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
MCP_SERVER_URL=http://localhost:3001 uv run mcp-simple-auth-client
```

----------------------------------------

TITLE: Install Python Dependencies with uv
DESCRIPTION: Install all project dependencies, including development extras, using the uv package manager. The `--frozen` flag ensures the exact versions from the lock file are used.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
uv sync --frozen --all-extras --dev
```

----------------------------------------

TITLE: Run Python Tests with pytest via uv
DESCRIPTION: Execute the project's test suite using pytest. The command is run via uv, ensuring the tests are executed within the project's isolated environment.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
uv run pytest
```

----------------------------------------

TITLE: Running MCP Server Directly (Python)
DESCRIPTION: Demonstrates how to run a specific MCP server instance directly using its run() method, specifying the transport and mount path. This is typically used for standalone execution.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/README.md#_snippet_25

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
    search_mcp.run(transport="sse", mount_path="/search")
```

----------------------------------------

TITLE: Run Python Type Checking with pyright via uv
DESCRIPTION: Perform static type checking on the Python codebase using pyright. This command is invoked through uv run to use the installed pyright version.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
uv run pyright
```

----------------------------------------

TITLE: Run Python Lint Check with ruff via uv
DESCRIPTION: Check the Python code for style violations and potential errors using the ruff linter. The command is executed via uv run.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv run ruff check .
```

----------------------------------------

TITLE: Run Python Code Formatting with ruff via uv
DESCRIPTION: Automatically format the Python code according to the project's style guidelines using the ruff formatter. This command is run via uv run.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CONTRIBUTING.md#_snippet_4

LANGUAGE: bash
CODE:
```
uv run ruff format .
```

----------------------------------------

TITLE: Managing Python Packages with uv
DESCRIPTION: Commands for managing Python packages using the uv tool, including adding dependencies, running tools, and upgrading packages. Explicitly notes the forbidden `uv pip install` command.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CLAUDE.md#_snippet_0

LANGUAGE: Bash
CODE:
```
uv add package
```

LANGUAGE: Bash
CODE:
```
uv run tool
```

LANGUAGE: Bash
CODE:
```
uv add --dev package --upgrade-package package
```

LANGUAGE: Bash
CODE:
```
uv pip install
```

----------------------------------------

TITLE: Executing Tests using uv and Pytest
DESCRIPTION: Commands for running the test suite using uv and pytest. Includes a variation to potentially resolve issues with pytest plugin autoloading, specifically mentioned for anyio.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CLAUDE.md#_snippet_1

LANGUAGE: Bash
CODE:
```
uv run --frozen pytest
```

LANGUAGE: Bash
CODE:
```
PYTEST_DISABLE_PLUGIN_AUTOLOAD="" uv run --frozen pytest
```

----------------------------------------

TITLE: Starting the MCP Server (Bash)
DESCRIPTION: Instructions on how to start the simple MCP server using the 'uv run' command. It shows the default stdio transport and how to specify the SSE transport on a custom port.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/servers/simple-tool/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
uv run mcp-simple-tool
```

LANGUAGE: bash
CODE:
```
uv run mcp-simple-tool --transport sse --port 8000
```

----------------------------------------

TITLE: Adding Trailers to Git Commits
DESCRIPTION: Examples of using the git commit command with the `--trailer` flag to add structured metadata to commit messages, such as reporting user or linking to GitHub issues.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CLAUDE.md#_snippet_2

LANGUAGE: Bash
CODE:
```
git commit --trailer "Reported-by:<name>"
```

LANGUAGE: Bash
CODE:
```
git commit --trailer "Github-Issue:#<number>"
```

----------------------------------------

TITLE: Upgrade Dependencies Lock File (uv)
DESCRIPTION: After changing dependency versions in `pyproject.toml`, run this command using the `uv` tool to update the lock file (`uv.lock`) based on the lowest compatible versions of direct dependencies.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/RELEASE.md#_snippet_0

LANGUAGE: Shell
CODE:
```
uv lock --resolution lowest-direct
```

----------------------------------------

TITLE: Performing Type Checking with uv and Pyright
DESCRIPTION: Command for running static type analysis on the codebase using the Pyright tool via uv to ensure type correctness.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CLAUDE.md#_snippet_4

LANGUAGE: Bash
CODE:
```
uv run --frozen pyright
```

----------------------------------------

TITLE: Formatting and Linting with Ruff
DESCRIPTION: Commands for using the Ruff tool via uv to format code, check for linting issues, and automatically fix fixable problems according to the project's style guide.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/CLAUDE.md#_snippet_3

LANGUAGE: Bash
CODE:
```
uv run --frozen ruff format .
```

LANGUAGE: Bash
CODE:
```
uv run --frozen ruff check .
```

LANGUAGE: Bash
CODE:
```
uv run --frozen ruff check . --fix
```

----------------------------------------

TITLE: Install Simple Auth Client Example (Bash)
DESCRIPTION: Navigate to the example directory and install dependencies using uv.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/clients/simple-auth-client/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd examples/clients/simple-auth-client
uv sync --reinstall
```

----------------------------------------

TITLE: Run Simple Auth Client (Default URL) (Bash)
DESCRIPTION: Execute the simple auth client using the default server URL configured in the client.
SOURCE: https://github.com/gwbischof/python-sdk/blob/main/examples/clients/simple-auth-client/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
uv run mcp-simple-auth-client
```